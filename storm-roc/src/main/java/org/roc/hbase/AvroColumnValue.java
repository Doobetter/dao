/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.roc.hbase;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroColumnValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroColumnValue\",\"namespace\":\"com.sugon.roc.hbasehbase\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer family;
  @Deprecated public java.nio.ByteBuffer qualifier;
  @Deprecated public java.nio.ByteBuffer value;
  @Deprecated public java.lang.Long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AvroColumnValue() {}

  /**
   * All-args constructor.
   */
  public AvroColumnValue(java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, java.nio.ByteBuffer value, java.lang.Long timestamp) {
    this.family = family;
    this.qualifier = qualifier;
    this.value = value;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return family;
    case 1: return qualifier;
    case 2: return value;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: family = (java.nio.ByteBuffer)value$; break;
    case 1: qualifier = (java.nio.ByteBuffer)value$; break;
    case 2: value = (java.nio.ByteBuffer)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'family' field.
   */
  public java.nio.ByteBuffer getFamily() {
    return family;
  }

  /**
   * Sets the value of the 'family' field.
   * @param value the value to set.
   */
  public void setFamily(java.nio.ByteBuffer value) {
    this.family = value;
  }

  /**
   * Gets the value of the 'qualifier' field.
   */
  public java.nio.ByteBuffer getQualifier() {
    return qualifier;
  }

  /**
   * Sets the value of the 'qualifier' field.
   * @param value the value to set.
   */
  public void setQualifier(java.nio.ByteBuffer value) {
    this.qualifier = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /** Creates a new AvroColumnValue RecordBuilder */
  public static org.roc.hbase.AvroColumnValue.Builder newBuilder() {
    return new org.roc.hbase.AvroColumnValue.Builder();
  }
  
  /** Creates a new AvroColumnValue RecordBuilder by copying an existing Builder */
  public static org.roc.hbase.AvroColumnValue.Builder newBuilder(org.roc.hbase.AvroColumnValue.Builder other) {
    return new org.roc.hbase.AvroColumnValue.Builder(other);
  }
  
  /** Creates a new AvroColumnValue RecordBuilder by copying an existing AvroColumnValue instance */
  public static org.roc.hbase.AvroColumnValue.Builder newBuilder(org.roc.hbase.AvroColumnValue other) {
    return new org.roc.hbase.AvroColumnValue.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroColumnValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroColumnValue>
    implements org.apache.avro.data.RecordBuilder<AvroColumnValue> {

    private java.nio.ByteBuffer family;
    private java.nio.ByteBuffer qualifier;
    private java.nio.ByteBuffer value;
    private java.lang.Long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(org.roc.hbase.AvroColumnValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.roc.hbase.AvroColumnValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.family)) {
        this.family = data().deepCopy(fields()[0].schema(), other.family);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualifier)) {
        this.qualifier = data().deepCopy(fields()[1].schema(), other.qualifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroColumnValue instance */
    private Builder(org.roc.hbase.AvroColumnValue other) {
            super(org.roc.hbase.AvroColumnValue.SCHEMA$);
      if (isValidValue(fields()[0], other.family)) {
        this.family = data().deepCopy(fields()[0].schema(), other.family);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualifier)) {
        this.qualifier = data().deepCopy(fields()[1].schema(), other.qualifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'family' field */
    public java.nio.ByteBuffer getFamily() {
      return family;
    }
    
    /** Sets the value of the 'family' field */
    public org.roc.hbase.AvroColumnValue.Builder setFamily(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.family = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'family' field has been set */
    public boolean hasFamily() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'family' field */
    public org.roc.hbase.AvroColumnValue.Builder clearFamily() {
      family = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'qualifier' field */
    public java.nio.ByteBuffer getQualifier() {
      return qualifier;
    }
    
    /** Sets the value of the 'qualifier' field */
    public org.roc.hbase.AvroColumnValue.Builder setQualifier(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.qualifier = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'qualifier' field has been set */
    public boolean hasQualifier() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'qualifier' field */
    public org.roc.hbase.AvroColumnValue.Builder clearQualifier() {
      qualifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.nio.ByteBuffer getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public org.roc.hbase.AvroColumnValue.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'value' field */
    public org.roc.hbase.AvroColumnValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public org.roc.hbase.AvroColumnValue.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'timestamp' field */
    public org.roc.hbase.AvroColumnValue.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

 //   @Override
    public AvroColumnValue build() {
      try {
        AvroColumnValue record = new AvroColumnValue();
        record.family = fieldSetFlags()[0] ? this.family : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.qualifier = fieldSetFlags()[1] ? this.qualifier : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
